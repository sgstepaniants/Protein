import numpy as np
import math

def sinkhorn_log(mu, nu, c, eps, niter=1000, tau=-0.5, rho=math.inf)
    
    # sinkhorn_log - stabilized sinkhorn over log domain with acceleration
    #
    #   [u,v,gamma,Wprimal,Wdual,err] = sinkhorn_log(mu,nu,c,epsilon,options);
    #
    #   mu and nu are marginals.
    #   c is cost
    #   epsilon is regularization
    #   coupling is 
    #       gamma = exp( (-c+u*ones(1,N(2))+ones(N(1),1)*v')/epsilon );
    #
    #   options.niter is the number of iterations.
    #   options.tau is an avering step. 
    #       - tau=0 is usual sinkhorn
    #       - tau<0 produces extrapolation and can usually accelerate.
    #
    #   options.rho controls the amount of mass variation. Large value of rho
    #   impose strong constraint on mass conservation. rho=Inf (default)
    #   corresponds to the usual OT (balanced setting). 
    #
    #   Copyright (c) 2016 Gabriel Peyre
    
    lmbda = rho / (rho+epsilon);
    if rho == math.Inf
        lmbda = 1
    
    m = mu.size()
    n = nu.size()
    H1 = np.ones(N(1),1)
    H2 = np.ones(N(2),1)
    
    ave = @(tau, u,u1)tau*u+(1-tau)*u1
    
    
    lse = @(A)log(sum(exp(A),2));
    M = @(u,v)(-c+u*H2'+H1*v') / eps;
    
    # kullback divergence
    H = @(p)-sum( p(:).*(log(p(:)+1e-20)-1) );
    KL  = @(h,p)sum( h(:).*log( h(:)./p(:) ) - h(:)+p(:) );
    KLd = @(u,p)sum( p(:).*(exp(-u(:))-1) );
    dotp = @(x,y)sum(x(:).*y(:));
    
    err = [];
    u = np.zeros(m, 1); 
    v = np.zeros(n, 1);
    for i in range(niter):
        u1 = u;
        u = ave(tau, u, lmbda*eps*np.log(mu) - lmbda*eps*lse(M(u,v) ) + lmbda*u);
        v = ave(tau, v, lmbda*eps*np.log(nu) - lmbda*eps*lse(M(u,v).transpose()) + lmbda*v);
        
        # coupling
        gamma = exp(M(u,v));
        if rho == math.Inf # marginal violation
            Wprimal(i) = dotp(c,gamma) - epsilon*H(gamma);
            Wdual(i) = dotp(u,mu) + dotp(v,nu) ...
                - epsilon*sum( gamma(:) );
            err(i,1) = norm(np.sum(gamma, axis=1)-mu);
        else # difference with previous iterate
            Wprimal(i) = dotp(c,gamma) - epsilon*H(gamma) + rho*KL(np.sum(gamma, axis=1), mu) + rho*KL(sum(gamma,1),nu);
            Wdual(i) = -rho*KLd(u/rho, mu) - rho*KLd(v/rho, nu) - epsilon*np.sum(gamma);
            err(i,1) = norm(u(:)-u1(:), 1);

    return u, v, gamma, Wprimal, Wdual, err
